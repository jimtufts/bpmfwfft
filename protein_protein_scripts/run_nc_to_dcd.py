"""
useful for nc files generated by rotation
"""
import os
import sys
import glob
import argparse

import netCDF4
import MMTK
import MMTK_DCD

def _write_dcd(nc_file_name, output_dcd):
    nc_handle = netCDF4.Dataset(nc_file_name, "r")
    nframes = nc_handle.variables["positions"].shape[0]
    natoms  = nc_handle.variables["positions"].shape[1]

    i_start = 0
    n_savc = 1
    delta_t = 1
    fd = MMTK_DCD.writeOpenDCD(output_dcd, natoms, nframes, i_start, n_savc, delta_t )

    for frame in range(nframes):
        x = nc_handle.variables["positions"][frame, :, 0]
        y = nc_handle.variables["positions"][frame, :, 1]
        z = nc_handle.variables["positions"][frame, :, 2]
        MMTK_DCD.writeDCDStep(fd, x, y, z)
    MMTK_DCD.writeCloseDCD(fd)
    return None

parser = argparse.ArgumentParser()
parser.add_argument( "--amber_dir",     type=str, default = "amber" )
args = parser.parse_args()

NC_FILE = "rotation.nc"
DCD_FILE = "rotation.dcd"
LIGAND_PRMTOP = "ligand.prmtop"

amber_dir = os.path.abspath(args.amber_dir)

complex_names = glob.glob("*")
complex_names = [dir for dir in complex_names if os.path.isdir(dir)]

for complex in complex_names:
    print complex
    out_dir = os.path.abspath(complex)
    
    ligand_prmtop = os.path.join(amber_dir, complex, LIGAND_PRMTOP)
    os.system("cp %s %s/."%(ligand_prmtop, out_dir))

    nc_file = os.path.join(out_dir, NC_FILE)
    dcd_file = os.path.join(out_dir, DCD_FILE)
    _write_dcd(nc_file, dcd_file)
print "Done"

